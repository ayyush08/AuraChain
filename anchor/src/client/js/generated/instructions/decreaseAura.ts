/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AURACHAIN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DECREASE_AURA_DISCRIMINATOR = new Uint8Array([
  117, 2, 50, 109, 57, 162, 96, 7,
]);

export function getDecreaseAuraDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DECREASE_AURA_DISCRIMINATOR
  );
}

export type DecreaseAuraInstruction<
  TProgram extends string = typeof AURACHAIN_PROGRAM_ADDRESS,
  TAccountAuraAccount extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuraAccount extends string
        ? WritableAccount<TAccountAuraAccount>
        : TAccountAuraAccount,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      ...TRemainingAccounts,
    ]
  >;

export type DecreaseAuraInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type DecreaseAuraInstructionDataArgs = { amount: number | bigint };

export function getDecreaseAuraInstructionDataEncoder(): FixedSizeEncoder<DecreaseAuraInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DECREASE_AURA_DISCRIMINATOR })
  );
}

export function getDecreaseAuraInstructionDataDecoder(): FixedSizeDecoder<DecreaseAuraInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getDecreaseAuraInstructionDataCodec(): FixedSizeCodec<
  DecreaseAuraInstructionDataArgs,
  DecreaseAuraInstructionData
> {
  return combineCodec(
    getDecreaseAuraInstructionDataEncoder(),
    getDecreaseAuraInstructionDataDecoder()
  );
}

export type DecreaseAuraInput<
  TAccountAuraAccount extends string = string,
  TAccountUser extends string = string,
> = {
  auraAccount: Address<TAccountAuraAccount>;
  user: TransactionSigner<TAccountUser>;
  amount: DecreaseAuraInstructionDataArgs['amount'];
};

export function getDecreaseAuraInstruction<
  TAccountAuraAccount extends string,
  TAccountUser extends string,
  TProgramAddress extends Address = typeof AURACHAIN_PROGRAM_ADDRESS,
>(
  input: DecreaseAuraInput<TAccountAuraAccount, TAccountUser>,
  config?: { programAddress?: TProgramAddress }
): DecreaseAuraInstruction<TProgramAddress, TAccountAuraAccount, TAccountUser> {
  // Program address.
  const programAddress = config?.programAddress ?? AURACHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    auraAccount: { value: input.auraAccount ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.auraAccount),
      getAccountMeta(accounts.user),
    ],
    programAddress,
    data: getDecreaseAuraInstructionDataEncoder().encode(
      args as DecreaseAuraInstructionDataArgs
    ),
  } as DecreaseAuraInstruction<
    TProgramAddress,
    TAccountAuraAccount,
    TAccountUser
  >;

  return instruction;
}

export type ParsedDecreaseAuraInstruction<
  TProgram extends string = typeof AURACHAIN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    auraAccount: TAccountMetas[0];
    user: TAccountMetas[1];
  };
  data: DecreaseAuraInstructionData;
};

export function parseDecreaseAuraInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDecreaseAuraInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      auraAccount: getNextAccount(),
      user: getNextAccount(),
    },
    data: getDecreaseAuraInstructionDataDecoder().decode(instruction.data),
  };
}
