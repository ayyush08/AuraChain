/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedDecreaseAuraInstruction,
  type ParsedIncreaseAuraInstruction,
  type ParsedInitializeInstruction,
} from '../instructions';

export const AURACHAIN_PROGRAM_ADDRESS =
  '71AHpFUaCzauR7qZkwYLSCjsj8R6fwhBLLmoG4UKLZ9j' as Address<'71AHpFUaCzauR7qZkwYLSCjsj8R6fwhBLLmoG4UKLZ9j'>;

export enum AurachainAccount {
  AuraAccount,
}

export function identifyAurachainAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AurachainAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 174, 173, 138, 14, 15, 48, 139])
      ),
      0
    )
  ) {
    return AurachainAccount.AuraAccount;
  }
  throw new Error(
    'The provided account could not be identified as a aurachain account.'
  );
}

export enum AurachainInstruction {
  DecreaseAura,
  IncreaseAura,
  Initialize,
}

export function identifyAurachainInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AurachainInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 2, 50, 109, 57, 162, 96, 7])
      ),
      0
    )
  ) {
    return AurachainInstruction.DecreaseAura;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 15, 155, 251, 37, 233, 54, 151])
      ),
      0
    )
  ) {
    return AurachainInstruction.IncreaseAura;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return AurachainInstruction.Initialize;
  }
  throw new Error(
    'The provided instruction could not be identified as a aurachain instruction.'
  );
}

export type ParsedAurachainInstruction<
  TProgram extends string = '71AHpFUaCzauR7qZkwYLSCjsj8R6fwhBLLmoG4UKLZ9j',
> =
  | ({
      instructionType: AurachainInstruction.DecreaseAura;
    } & ParsedDecreaseAuraInstruction<TProgram>)
  | ({
      instructionType: AurachainInstruction.IncreaseAura;
    } & ParsedIncreaseAuraInstruction<TProgram>)
  | ({
      instructionType: AurachainInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>);
