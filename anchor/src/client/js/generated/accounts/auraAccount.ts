/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const AURA_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  144, 174, 173, 138, 14, 15, 48, 139,
]);

export function getAuraAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AURA_ACCOUNT_DISCRIMINATOR
  );
}

export type AuraAccount = {
  discriminator: ReadonlyUint8Array;
  username: string;
  owner: Address;
  auraPoints: bigint;
};

export type AuraAccountArgs = {
  username: string;
  owner: Address;
  auraPoints: number | bigint;
};

export function getAuraAccountEncoder(): Encoder<AuraAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['username', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['owner', getAddressEncoder()],
      ['auraPoints', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AURA_ACCOUNT_DISCRIMINATOR })
  );
}

export function getAuraAccountDecoder(): Decoder<AuraAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['username', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['owner', getAddressDecoder()],
    ['auraPoints', getU64Decoder()],
  ]);
}

export function getAuraAccountCodec(): Codec<AuraAccountArgs, AuraAccount> {
  return combineCodec(getAuraAccountEncoder(), getAuraAccountDecoder());
}

export function decodeAuraAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AuraAccount, TAddress>;
export function decodeAuraAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AuraAccount, TAddress>;
export function decodeAuraAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AuraAccount, TAddress> | MaybeAccount<AuraAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAuraAccountDecoder()
  );
}

export async function fetchAuraAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AuraAccount, TAddress>> {
  const maybeAccount = await fetchMaybeAuraAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAuraAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AuraAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAuraAccount(maybeAccount);
}

export async function fetchAllAuraAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AuraAccount>[]> {
  const maybeAccounts = await fetchAllMaybeAuraAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAuraAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AuraAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAuraAccount(maybeAccount));
}
