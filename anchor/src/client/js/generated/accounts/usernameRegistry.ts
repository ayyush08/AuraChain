/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const USERNAME_REGISTRY_DISCRIMINATOR = new Uint8Array([
  145, 217, 207, 126, 35, 114, 138, 18,
]);

export function getUsernameRegistryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USERNAME_REGISTRY_DISCRIMINATOR
  );
}

export type UsernameRegistry = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
};

export type UsernameRegistryArgs = { owner: Address };

export function getUsernameRegistryEncoder(): FixedSizeEncoder<UsernameRegistryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: USERNAME_REGISTRY_DISCRIMINATOR })
  );
}

export function getUsernameRegistryDecoder(): FixedSizeDecoder<UsernameRegistry> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
  ]);
}

export function getUsernameRegistryCodec(): FixedSizeCodec<
  UsernameRegistryArgs,
  UsernameRegistry
> {
  return combineCodec(
    getUsernameRegistryEncoder(),
    getUsernameRegistryDecoder()
  );
}

export function decodeUsernameRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UsernameRegistry, TAddress>;
export function decodeUsernameRegistry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UsernameRegistry, TAddress>;
export function decodeUsernameRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<UsernameRegistry, TAddress>
  | MaybeAccount<UsernameRegistry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUsernameRegistryDecoder()
  );
}

export async function fetchUsernameRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UsernameRegistry, TAddress>> {
  const maybeAccount = await fetchMaybeUsernameRegistry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUsernameRegistry<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UsernameRegistry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUsernameRegistry(maybeAccount);
}

export async function fetchAllUsernameRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UsernameRegistry>[]> {
  const maybeAccounts = await fetchAllMaybeUsernameRegistry(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUsernameRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UsernameRegistry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeUsernameRegistry(maybeAccount)
  );
}

export function getUsernameRegistrySize(): number {
  return 40;
}
